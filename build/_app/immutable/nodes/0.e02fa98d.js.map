{"version":3,"mappings":"ofACO,MAAMA,EACZ,OAAO,OAAW,IACf,OACA,OAAO,WAAe,IACtB,WAEA,OCJSC,EAA8DC,IAE3C,ICE1BC,EAA2B,CAChC,GAAI,IAAMC,EAAA,WAAO,6BAAM,MACvB,GAAI,IAAMA,EAAA,WAAO,6BAAM,KACxB,EAEMC,GAAmB,CAACH,EAAiBI,IAC1CC,EAAcL,CAAM,EAAI,CAAE,GAAGK,EAAcL,CAAM,EAAG,GAAGI,CAAW,EAEtDE,GAAoB,MAAON,IACtC,MAAMC,EAAyBD,CAAM,EAAK,WAE/BO,GAAkB,MAAOP,GAAmC,CACxEG,GAAiBH,EAAQ,MAAMM,GAAkBN,CAAM,CAAC,EACxDQ,GAAeR,CAAM,CACtB,EAIaQ,GAAkBR,GAC9B,KAAMS,EAAiBT,CAAM,EAAID,EAAqB,GCxB1CW,GAAY,GACZC,GAAgB,SAEhBC,GAAO,MAAO,CAAC,KAAAC,MAClB,MAAAN,GAAgBM,EAAK,MAAM,EAC1B,CAAE,OAAQA,EAAK;;;;;;;;;;sLCsCX,oCAA0B,qaAAAC,CAAA,4XAxBhCC,EAAW,GAAAC,EAAA,kBAIlBC,EAYSD,EAAA,KAAAE,CAAA,WAIXC,EAEOC,EAAAC,EAAAC,CAAA,iIAtBEP,EAAW,wTAhBpBQ,EAAYC,GAAU,CACf,YAAS,oBAEH,mBAASC,GAAO,CACzB,SAAS,oBAAmB,UAC1BA,IACM,MAAAD,EAAW,mBAIZ,KAAAX,CAAI,EAAAa,EACf,OAAAC,EAAUd,EAAK,MAAM,yEAbpBe,EAAA,EACCC,EAAcC,EAAUA,EAAQ,YAAY,QAAU,EAAE","names":["globals","initFormatters","locale","localeTranslationLoaders","__vitePreload","updateDictionary","dictionary","loadedLocales","importLocaleAsync","loadLocaleAsync","loadFormatters","loadedFormatters","prerender","trailingSlash","load","data","info","ctx","document_1","append_hydration","script","insert_hydration","target","main","anchor","onNavigate","navigation","resolve","$$props","setLocale","$$invalidate","webManifest","pwaInfo"],"sources":["../../../../../../node_modules/.pnpm/svelte@4.2.0/node_modules/svelte/src/runtime/internal/globals.js","../../../../../../src/i18n/formatters.ts","../../../../../../src/i18n/i18n-util.async.ts","../../../../../../src/routes/+layout.ts","../../../../../../src/routes/+layout.svelte"],"sourcesContent":["/** @type {typeof globalThis} */\nexport const globals =\n\ttypeof window !== 'undefined'\n\t\t? window\n\t\t: typeof globalThis !== 'undefined'\n\t\t? globalThis\n\t\t: // @ts-ignore Node typings have this\n\t\t  global;\n","import type { FormattersInitializer } from 'typesafe-i18n'\r\nimport type { Locales, Formatters } from './i18n-types'\r\n\r\nexport const initFormatters: FormattersInitializer<Locales, Formatters> = (locale: Locales) => {\r\n\r\n\tconst formatters: Formatters = {\r\n\t\t// add your formatter functions here\r\n\t}\r\n\r\n\treturn formatters\r\n}\r\n","// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.\n/* eslint-disable */\n\nimport { initFormatters } from './formatters'\nimport type { Locales, Translations } from './i18n-types'\nimport { loadedFormatters, loadedLocales, locales } from './i18n-util'\n\nconst localeTranslationLoaders = {\n\ten: () => import('./en'),\n\tfr: () => import('./fr'),\n}\n\nconst updateDictionary = (locale: Locales, dictionary: Partial<Translations>): Translations =>\n\tloadedLocales[locale] = { ...loadedLocales[locale], ...dictionary }\n\nexport const importLocaleAsync = async (locale: Locales): Promise<Translations> =>\n\t(await localeTranslationLoaders[locale]()).default as unknown as Translations\n\nexport const loadLocaleAsync = async (locale: Locales): Promise<void> => {\n\tupdateDictionary(locale, await importLocaleAsync(locale))\n\tloadFormatters(locale)\n}\n\nexport const loadAllLocalesAsync = (): Promise<void[]> => Promise.all(locales.map(loadLocaleAsync))\n\nexport const loadFormatters = (locale: Locales): void =>\n\tvoid (loadedFormatters[locale] = initFormatters(locale))\n","import { loadLocaleAsync } from \"$i18n/i18n-util.async\";\r\n\r\nexport const prerender = true;\r\nexport const trailingSlash = 'always';\r\n\r\nexport const load = async ({data}) => {\r\n    await loadLocaleAsync(data.locale);\r\n    return { locale: data.locale };\r\n};","<script lang=\"ts\">\r\n  import { setLocale } from \"$i18n/i18n-svelte\";\r\n  import { pwaInfo } from \"virtual:pwa-info\";\r\n  import { onNavigate } from \"$app/navigation\";\r\n\r\n  $: webManifest = pwaInfo ? pwaInfo.webManifest.linkTag : \"\";\r\n\r\n  onNavigate((navigation) => {\r\n    if (!document.startViewTransition) return;\r\n    return new Promise((resolve) => {\r\n      document.startViewTransition(async () => {\r\n        resolve();\r\n        await navigation.complete;\r\n      });\r\n    });\r\n  });\r\n\r\n  export let data;\r\n  setLocale(data.locale);\r\n</script>\r\n\r\n<svelte:head>\r\n  <!-- PWA Manifest-->\r\n  {@html webManifest}\r\n  <!-- End PWA Manifest-->\r\n\r\n  <!-- Matomo Tag Manager -->\r\n  <script>\r\n    const _mtm = (window._mtm = window._mtm || []);\r\n    _mtm.push({ \"mtm.startTime\": new Date().getTime(), event: \"mtm.Start\" });\r\n    (function () {\r\n      var d = document,\r\n        g = d.createElement(\"script\"),\r\n        s = d.getElementsByTagName(\"script\")[0];\r\n      g.async = true;\r\n      g.src =\r\n        \"https://cdn.matomo.cloud/prerenderbroutindev.matomo.cloud/container_IUHbbhB5.js\";\r\n      s.parentNode.insertBefore(g, s);\r\n    })();\r\n  </script>\r\n  <!-- End Matomo Tag Manager -->\r\n</svelte:head>\r\n\r\n<main>\r\n  <slot />\r\n</main>\r\n\r\n{#await import(\"$lib/ReloadPrompt.svelte\") then { default: ReloadPrompt }}\r\n  <ReloadPrompt />\r\n{/await}\r\n"],"file":"_app/immutable/nodes/0.e02fa98d.js"}