{"version":3,"mappings":"+PAGa,MAAAA,EAA8DC,IAE3C,ICE1BC,EAA2B,CAChC,GAAI,IAAMC,EAAA,WAAO,6BAAM,MACvB,GAAI,IAAMA,EAAA,WAAO,6BAAM,KACxB,EAEMC,EAAmB,CAACH,EAAiBI,IAC1CC,EAAcL,CAAM,EAAI,CAAE,GAAGK,EAAcL,CAAM,EAAG,GAAGI,CAAW,EAEtDE,EAAoB,MAAON,IACtC,MAAMC,EAAyBD,CAAM,EAAK,WAE/BO,EAAkB,MAAOP,GAAmC,CACxEG,EAAiBH,EAAQ,MAAMM,EAAkBN,CAAM,CAAC,EACxDQ,EAAeR,CAAM,CACtB,EAIaQ,EAAkBR,GAC9B,KAAMS,EAAiBT,CAAM,EAAID,EAAqB,GCxB1CW,EAAY,GACZC,EAAgB,SAEhBC,EAAO,MAAO,CAAC,KAAAC,MAClB,MAAAN,EAAgBM,EAAK,MAAM,EAC1B,CAAE,OAAQA,EAAK","names":["initFormatters","locale","localeTranslationLoaders","__vitePreload","updateDictionary","dictionary","loadedLocales","importLocaleAsync","loadLocaleAsync","loadFormatters","loadedFormatters","prerender","trailingSlash","load","data"],"sources":["../../../../../../src/i18n/formatters.ts","../../../../../../src/i18n/i18n-util.async.ts","../../../../../../src/routes/+layout.ts"],"sourcesContent":["import type { FormattersInitializer } from 'typesafe-i18n'\r\nimport type { Locales, Formatters } from './i18n-types'\r\n\r\nexport const initFormatters: FormattersInitializer<Locales, Formatters> = (locale: Locales) => {\r\n\r\n\tconst formatters: Formatters = {\r\n\t\t// add your formatter functions here\r\n\t}\r\n\r\n\treturn formatters\r\n}\r\n","// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.\n/* eslint-disable */\n\nimport { initFormatters } from './formatters'\nimport type { Locales, Translations } from './i18n-types'\nimport { loadedFormatters, loadedLocales, locales } from './i18n-util'\n\nconst localeTranslationLoaders = {\n\ten: () => import('./en'),\n\tfr: () => import('./fr'),\n}\n\nconst updateDictionary = (locale: Locales, dictionary: Partial<Translations>): Translations =>\n\tloadedLocales[locale] = { ...loadedLocales[locale], ...dictionary }\n\nexport const importLocaleAsync = async (locale: Locales): Promise<Translations> =>\n\t(await localeTranslationLoaders[locale]()).default as unknown as Translations\n\nexport const loadLocaleAsync = async (locale: Locales): Promise<void> => {\n\tupdateDictionary(locale, await importLocaleAsync(locale))\n\tloadFormatters(locale)\n}\n\nexport const loadAllLocalesAsync = (): Promise<void[]> => Promise.all(locales.map(loadLocaleAsync))\n\nexport const loadFormatters = (locale: Locales): void =>\n\tvoid (loadedFormatters[locale] = initFormatters(locale))\n","import { loadLocaleAsync } from \"$i18n/i18n-util.async\";\r\n\r\nexport const prerender = true;\r\nexport const trailingSlash = 'always';\r\n\r\nexport const load = async ({data}) => {\r\n    await loadLocaleAsync(data.locale);\r\n    return { locale: data.locale }\r\n};"],"file":"_app/immutable/nodes/0.9ee7e264.js"}