{"version":3,"mappings":"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","names":["registerSW","options","immediate","onNeedRefresh","onOfflineReady","onRegistered","onRegisteredSW","onRegisterError","wb","registerPromise","sendSkipWaitingMessage","updateServiceWorker","_reloadPage","register","Workbox","__vitePreload","onNeedRefreshCalled","showSkipWaitingPrompt","event","r","e","useRegisterSW","needRefresh","writable","offlineReady","t0_value","ctx","t3_value","create_if_block_1","insert_hydration","target","div1","anchor","append_hydration","div0","span","button","dirty","set_data","t0","t3","t_value","t","create_if_block","error","close","click_handler","$$invalidate","toast","$needRefresh"],"sources":["../../../../../../../../../../../@vite-plugin-pwa/virtual:pwa-register/svelte","../../../../../../src/lib/ReloadPrompt.svelte"],"sourcesContent":["// src/client/build/svelte.ts\nimport { writable } from \"svelte/store\";\n\n// src/client/build/register.ts\nvar autoUpdateMode = \"false\";\nvar selfDestroying = \"false\";\nvar auto = autoUpdateMode === \"true\";\nvar autoDestroy = selfDestroying === \"true\";\nfunction registerSW(options = {}) {\n  const {\n    immediate = false,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  let wb;\n  let registerPromise;\n  let sendSkipWaitingMessage;\n  const updateServiceWorker = async (_reloadPage = true) => {\n    await registerPromise;\n    if (!auto) {\n      await (sendSkipWaitingMessage == null ? void 0 : sendSkipWaitingMessage());\n    }\n  };\n  async function register() {\n    if (\"serviceWorker\" in navigator) {\n      const { Workbox } = await import(\"workbox-window\");\n      wb = new Workbox(\"/sw.js\", { scope: \"/\", type: \"classic\" });\n      sendSkipWaitingMessage = async () => {\n        await (wb == null ? void 0 : wb.messageSkipWaiting());\n      };\n      if (!autoDestroy) {\n        if (auto) {\n          wb.addEventListener(\"activated\", (event) => {\n            if (event.isUpdate || event.isExternal)\n              window.location.reload();\n          });\n          wb.addEventListener(\"installed\", (event) => {\n            if (!event.isUpdate) {\n              onOfflineReady == null ? void 0 : onOfflineReady();\n            }\n          });\n        } else {\n          let onNeedRefreshCalled = false;\n          const showSkipWaitingPrompt = () => {\n            onNeedRefreshCalled = true;\n            wb == null ? void 0 : wb.addEventListener(\"controlling\", (event) => {\n              if (event.isUpdate)\n                window.location.reload();\n            });\n            onNeedRefresh == null ? void 0 : onNeedRefresh();\n          };\n          wb.addEventListener(\"installed\", (event) => {\n            if (typeof event.isUpdate === \"undefined\") {\n              if (typeof event.isExternal !== \"undefined\") {\n                if (event.isExternal)\n                  showSkipWaitingPrompt();\n                else\n                  !onNeedRefreshCalled && (onOfflineReady == null ? void 0 : onOfflineReady());\n              } else {\n                if (event.isExternal)\n                  window.location.reload();\n                else\n                  !onNeedRefreshCalled && (onOfflineReady == null ? void 0 : onOfflineReady());\n              }\n            } else if (!event.isUpdate) {\n              onOfflineReady == null ? void 0 : onOfflineReady();\n            }\n          });\n          wb.addEventListener(\"waiting\", showSkipWaitingPrompt);\n          wb.addEventListener(\"externalwaiting\", showSkipWaitingPrompt);\n        }\n      }\n      wb.register({ immediate }).then((r) => {\n        if (onRegisteredSW)\n          onRegisteredSW(\"/sw.js\", r);\n        else\n          onRegistered == null ? void 0 : onRegistered(r);\n      }).catch((e) => {\n        onRegisterError == null ? void 0 : onRegisterError(e);\n      });\n    }\n  }\n  registerPromise = register();\n  return updateServiceWorker;\n}\n\n// src/client/build/svelte.ts\nfunction useRegisterSW(options = {}) {\n  const {\n    immediate = true,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  const needRefresh = writable(false);\n  const offlineReady = writable(false);\n  const updateServiceWorker = registerSW({\n    immediate,\n    onOfflineReady() {\n      offlineReady.set(true);\n      onOfflineReady == null ? void 0 : onOfflineReady();\n    },\n    onNeedRefresh() {\n      needRefresh.set(true);\n      onNeedRefresh == null ? void 0 : onNeedRefresh();\n    },\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  });\n  return {\n    needRefresh,\n    offlineReady,\n    updateServiceWorker\n  };\n}\nexport {\n  useRegisterSW\n};\n","<script lang=\"ts\">\r\n    import LL from \"$i18n/i18n-svelte\";\r\n    import { useRegisterSW } from \"virtual:pwa-register/svelte\";\r\n    const { needRefresh, updateServiceWorker, offlineReady } = useRegisterSW({\r\n        onRegistered(r) {\r\n            // uncomment following code if you want check for updates\r\n            // r && setInterval(() => {\r\n            //    console.log('Checking for sw update')\r\n            //    r.update()\r\n            // }, 20000 /* 20s for testing purposes */)\r\n            console.log(`SW Registered: ${r}`);\r\n        },\r\n        onRegisterError(error: any) {\r\n            console.log(\"SW registration error\", error);\r\n        },\r\n    });\r\n    const close = () => {\r\n        offlineReady.set(false);\r\n        needRefresh.set(false);\r\n    };\r\n    $: toast = $needRefresh;\r\n</script>\r\n\r\n{#if toast}\r\n    <div class=\"pwa-toast\" role=\"alert\">\r\n        <div class=\"message\">\r\n            <span>\r\n                {$LL.pwa_new_content()}\r\n            </span>\r\n        </div>\r\n        {#if $needRefresh}\r\n            <button on:click={() => updateServiceWorker(true)}>\r\n                {$LL.pwa_reload()}\r\n            </button>\r\n        {/if}\r\n        <button on:click={close}>\r\n            {$LL.pwa_close()}\r\n        </button>\r\n    </div>\r\n{/if}\r\n\r\n<style>\r\n    .pwa-toast {\r\n        position: absolute;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        margin: 0.5rem;\r\n        padding: 12px;\r\n        border: 1px solid #8885;\r\n        border-radius: 4px;\r\n        z-index: 2;\r\n        text-align: left;\r\n        box-shadow: 3px 4px 5px 0 #8885;\r\n        background-color: white;\r\n    }\r\n    .pwa-toast .message {\r\n        margin-bottom: 8px;\r\n    }\r\n    .pwa-toast button {\r\n        border: 1px solid #8885;\r\n        outline: none;\r\n        margin-right: 5px;\r\n        border-radius: 2px;\r\n        padding: 3px 10px;\r\n    }\r\n</style>\r\n"],"file":"_app/immutable/chunks/ReloadPrompt.de4a324e.js"}